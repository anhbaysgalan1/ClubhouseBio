{"ast":null,"code":"// import NextAuth from \"next-auth\";\n// import Providers from \"next-auth/providers\";\n// import axios from \"axios\";\n// const login = async (data: any) => {\n//   console.log(\"in login\")\n//     const config = {\n//         headers: {\n//             'Content-Type': \"application/json; charset=utf-8\",\n//             'corsOrigin': '*',\n//             \"Access-Control-Allow-Origin\": \"*\"\n//         }\n//     };\n//     const url = \"http://localhost/auth/token\"\n//     const result = await axios.post(url, data, config);\n//     console.log('result', result);\n//     return result;\n// };\n// export default (req: any, res: any) =>\n//     NextAuth(req, res, {\n//         providers: [\n//             Providers.Credentials({\n//                 name: 'Credentials',\n//                 credentials: {\n//                   username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n//                   password: {  label: \"Password\", type: \"password\" }\n//                 },\n//                 authorize: async (credentials) => {\n//                     console.log(\"credentials_:\", credentials);\n//                     try {\n//                         const data = {\n//                             username: credentials.username,\n//                             password: credentials.password\n//                         }\n//                         // API call associated with authentification\n//                          // look up the user from the credentials supplied\n//                         const user = await login(data);\n//                         if (user) {\n//                             // Any object returned will be saved in `user` property of the JWT\n//                             return Promise.resolve(user);\n//                           }\n//                     } catch (error) {\n//                         if (error.response) {\n//                             console.log(error.response);\n//                             return Promise.reject(new Error('Invalid Username  and Password combination'));\n//                         }\n//                       }\n//                       return Promise.resolve(null)\n//                 },\n//             }),\n//         ],\n//         session: {\n//             // Use JSON Web Tokens for session instead of database sessions.\n//             // This option can be used with or without a database for users/accounts.\n//             // Note: `jwt` is automatically set to `true` if no database is specified.\n//             jwt: true,\n//             // Seconds - How long until an idle session expires and is no longer valid.\n//             maxAge: 1 * 3 * 60 * 60, // 3 hrs\n//             // Seconds - Throttle how frequently to write to database to extend a session.\n//             // Use it to limit write operations. Set to 0 to always update the database.\n//             // Note: This option is ignored if using JSON Web Tokens\n//             updateAge: 24 * 60 * 60, // 24 hours\n//           },\n//           // callbacks: {\n//           //   signIn: async (user, account, profile) => { console.log(\"in callback\"); return Promise.resolve(true) },\n//           //   redirect: async (url, baseUrl) => { return Promise.resolve(baseUrl) },\n//           //   session: async (session, user) => { return Promise.resolve(session) },\n//           //   jwt: async (token, user, account, profile, isNewUser) => { return Promise.resolve(token) }\n//           // },\n//         // pages: {\n//         //     signIn: '/auth/credentials-signin',\n//         //     signOut: '/auth/credentials-signin?logout=true',\n//         //     error: '/auth/credentials-signin', // Error code passed in query string as ?error=\n//         //     newUser:'/'\n//         //   },\n//         // debug: process.env.NODE_ENV === \"development\",\n//         // secret: process.env.NEXT_PUBLIC_AUTH_SECRET,\n//         // jwt: {\n//         //     secret: process.env.NEXT_PUBLIC_JWT_SECRET,\n//         // }\n//     });\nimport NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\n\nconst isCorrectCredentials = credentials => credentials.username === process.env.NEXTAUTH_USERNAME && credentials.password === process.env.NEXTAUTH_PASSWORD;\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: \"Credentials\",\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: \"Username\",\n        type: \"text\",\n        placeholder: \"jsmith\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\"\n      }\n    },\n    authorize: async credentials => {\n      if (isCorrectCredentials(credentials)) {\n        const user = {\n          id: 1,\n          name: \"Admin\"\n        }; // Any object returned will be saved in `user` property of the JWT\n\n        return Promise.resolve(user);\n      } // If you return null or false then the credentials will be rejected\n\n\n      return Promise.resolve(null); // You can also Reject this callback with an Error or with a URL:\n      // return Promise.reject(new Error('error message')) // Redirect to error page\n      // return Promise.reject('/path/to/redirect')        // Redirect to a URL\n    }\n  })]\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/Users/jan/Documents/Programming/leetcodebuddy/frontend/app/pages/api/auth/[...nextauth].ts"],"names":["NextAuth","Providers","isCorrectCredentials","credentials","username","process","env","NEXTAUTH_USERNAME","password","NEXTAUTH_PASSWORD","options","providers","Credentials","name","label","type","placeholder","authorize","user","id","Promise","resolve","req","res"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AAEA,MAAMC,oBAAoB,GAAGC,WAAW,IACtCA,WAAW,CAACC,QAAZ,KAAyBC,OAAO,CAACC,GAAR,CAAYC,iBAArC,IACAJ,WAAW,CAACK,QAAZ,KAAyBH,OAAO,CAACC,GAAR,CAAYG,iBAFvC;;AAIA,MAAMC,OAAO,GAAG;AACd;AACAC,EAAAA,SAAS,EAAE,CACTV,SAAS,CAACW,WAAV,CAAsB;AACpB;AACAC,IAAAA,IAAI,EAAE,aAFc;AAGpB;AACA;AACA;AACAV,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AAAEU,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OADC;AAEXR,MAAAA,QAAQ,EAAE;AAAEM,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAFC,KANO;AAUpBE,IAAAA,SAAS,EAAE,MAAMd,WAAN,IAAqB;AAC9B,UAAID,oBAAoB,CAACC,WAAD,CAAxB,EAAuC;AACrC,cAAMe,IAAI,GAAG;AAAEC,UAAAA,EAAE,EAAE,CAAN;AAASN,UAAAA,IAAI,EAAE;AAAf,SAAb,CADqC,CAErC;;AACA,eAAOO,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACD,OAL6B,CAM5B;;;AACA,aAAOE,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP,CAP4B,CAQ5B;AACA;AACA;AAEH;AAtBmB,GAAtB,CADS;AAFG,CAAhB;AA8BA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcvB,QAAQ,CAACsB,GAAD,EAAMC,GAAN,EAAWb,OAAX,CAArC","sourcesContent":["// import NextAuth from \"next-auth\";\n// import Providers from \"next-auth/providers\";\n// import axios from \"axios\";\n\n// const login = async (data: any) => {\n//   console.log(\"in login\")\n//     const config = {\n//         headers: {\n//             'Content-Type': \"application/json; charset=utf-8\",\n//             'corsOrigin': '*',\n//             \"Access-Control-Allow-Origin\": \"*\"\n//         }\n//     };\n//     const url = \"http://localhost/auth/token\"\n//     const result = await axios.post(url, data, config);\n//     console.log('result', result);\n//     return result;\n// };\n\n// export default (req: any, res: any) =>\n//     NextAuth(req, res, {\n//         providers: [\n//             Providers.Credentials({\n//                 name: 'Credentials',\n//                 credentials: {\n//                   username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n//                   password: {  label: \"Password\", type: \"password\" }\n//                 },\n//                 authorize: async (credentials) => {\n//                     console.log(\"credentials_:\", credentials);\n//                     try {\n//                         const data = {\n//                             username: credentials.username,\n//                             password: credentials.password\n\n//                         }\n//                         // API call associated with authentification\n//                          // look up the user from the credentials supplied\n//                         const user = await login(data);\n//                         if (user) {\n//                             // Any object returned will be saved in `user` property of the JWT\n//                             return Promise.resolve(user);\n//                           }\n//                     } catch (error) {\n//                         if (error.response) {\n//                             console.log(error.response);\n//                             return Promise.reject(new Error('Invalid Username  and Password combination'));\n//                         }\n//                       }\n//                       return Promise.resolve(null)\n//                 },\n//             }),\n//         ],\n//         session: {\n//             // Use JSON Web Tokens for session instead of database sessions.\n//             // This option can be used with or without a database for users/accounts.\n//             // Note: `jwt` is automatically set to `true` if no database is specified.\n//             jwt: true,\n//             // Seconds - How long until an idle session expires and is no longer valid.\n//             maxAge: 1 * 3 * 60 * 60, // 3 hrs\n//             // Seconds - Throttle how frequently to write to database to extend a session.\n//             // Use it to limit write operations. Set to 0 to always update the database.\n//             // Note: This option is ignored if using JSON Web Tokens\n//             updateAge: 24 * 60 * 60, // 24 hours\n//           },\n//           // callbacks: {\n//           //   signIn: async (user, account, profile) => { console.log(\"in callback\"); return Promise.resolve(true) },\n//           //   redirect: async (url, baseUrl) => { return Promise.resolve(baseUrl) },\n//           //   session: async (session, user) => { return Promise.resolve(session) },\n//           //   jwt: async (token, user, account, profile, isNewUser) => { return Promise.resolve(token) }\n//           // },\n//         // pages: {\n//         //     signIn: '/auth/credentials-signin',\n//         //     signOut: '/auth/credentials-signin?logout=true',\n//         //     error: '/auth/credentials-signin', // Error code passed in query string as ?error=\n//         //     newUser:'/'\n//         //   },\n\n//         // debug: process.env.NODE_ENV === \"development\",\n//         // secret: process.env.NEXT_PUBLIC_AUTH_SECRET,\n//         // jwt: {\n//         //     secret: process.env.NEXT_PUBLIC_JWT_SECRET,\n//         // }\n//     });\n\n\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\n\nconst isCorrectCredentials = credentials =>\n  credentials.username === process.env.NEXTAUTH_USERNAME &&\n  credentials.password === process.env.NEXTAUTH_PASSWORD\n\nconst options = {\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Credentials({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: \"Credentials\",\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      authorize: async credentials => {\n        if (isCorrectCredentials(credentials)) {\n          const user = { id: 1, name: \"Admin\" }\n          // Any object returned will be saved in `user` property of the JWT\n          return Promise.resolve(user)\n        }\n          // If you return null or false then the credentials will be rejected\n          return Promise.resolve(null)\n          // You can also Reject this callback with an Error or with a URL:\n          // return Promise.reject(new Error('error message')) // Redirect to error page\n          // return Promise.reject('/path/to/redirect')        // Redirect to a URL\n\n      },\n    }),\n  ],\n}\n\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}