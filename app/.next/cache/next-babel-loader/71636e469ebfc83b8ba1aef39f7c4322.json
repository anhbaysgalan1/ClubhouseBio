{"ast":null,"code":"import _toConsumableArray from \"/Users/jan/Documents/Programming/JavaScript/KindleClippings/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jan/Documents/Programming/JavaScript/KindleClippings/app/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nexport default function Home() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(null),\n      fileName = _useState[0],\n      setFileName = _useState[1]; // const [fileContent, setFileContent] = useState<string | null>(null);\n\n\n  var _useState2 = useState(null),\n      fileParsedContent = _useState2[0],\n      setFileParsedContent = _useState2[1];\n\n  var parseFile = function parseFile(file) {\n    var splittedFile = file.split(/\\r?\\n/g); // console.log(splittedFile.length);\n\n    var Notes = new Map();\n    var blockCounter = 0;\n\n    while (blockCounter < Math.floor(splittedFile.length / 5)) {\n      // parse block of 5 lines\n      var title = splittedFile[blockCounter * 5 + 0];\n      var clippingType = splittedFile[blockCounter * 5 + 1];\n      var Note = splittedFile[blockCounter * 5 + 3];\n      blockCounter += 1;\n\n      if (clippingType.includes('Highlight')) {\n        // add block to dict\n        if (Notes.has(title)) {\n          var oldNote = Notes.get(title);\n          var newNote = \"\".concat(oldNote, \"\\n\\n\").concat(Note);\n          Notes.set(title, newNote);\n        } else {\n          Notes.set(title, Note);\n        }\n      }\n    }\n\n    return Notes;\n  };\n\n  var handleFileUpload = function handleFileUpload(e) {\n    var target = e.target;\n    var file = target.files[0];\n    var reader = new FileReader();\n    reader.readAsText(file);\n\n    reader.onload = function () {\n      // setFileContent(reader.result as string);\n      setFileParsedContent(parseFile(reader.result));\n    };\n\n    reader.onerror = function () {// console.log(reader.error);\n    };\n\n    setFileName(file.name);\n  };\n\n  var printNoteMap = function printNoteMap(key, value) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-center text-xl\",\n        children: key\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"whitespace-pre-line\",\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Kindle Clippings Parser\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-3xl mx-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"mt-8 text-2xl text-center\",\n          children: \"Welcome friends of LibGen!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".txt\",\n            onChange: handleFileUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), \"Uploaded File: \", fileName, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"File: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Parsed File:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), fileParsedContent ? _toConsumableArray(fileParsedContent.keys()).map(function (noteTitle) {\n              return printNoteMap(noteTitle, fileParsedContent.get(noteTitle));\n            }) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"Lz4zSOtERM8Jw1PaFvGErwniXaI=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/jan/Documents/Programming/JavaScript/KindleClippings/app/pages/index.tsx"],"names":["React","useState","Head","Home","fileName","setFileName","fileParsedContent","setFileParsedContent","parseFile","file","splittedFile","split","Notes","Map","blockCounter","Math","floor","length","title","clippingType","Note","includes","has","oldNote","get","newNote","set","handleFileUpload","e","target","files","reader","FileReader","readAsText","onload","result","onerror","name","printNoteMap","key","value","keys","map","noteTitle"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Head from 'next/head';\n\nexport default function Home() {\n  const [fileName, setFileName] = useState<string | null>(null);\n  // const [fileContent, setFileContent] = useState<string | null>(null);\n  const [fileParsedContent, setFileParsedContent] = useState<Map<\n    any,\n    any\n  > | null>(null);\n\n  const parseFile = (file: string) => {\n    const splittedFile = file.split(/\\r?\\n/g);\n    // console.log(splittedFile.length);\n    const Notes = new Map();\n    let blockCounter = 0;\n    while (blockCounter < Math.floor(splittedFile.length / 5)) {\n      // parse block of 5 lines\n      const title = splittedFile[blockCounter * 5 + 0];\n      const clippingType = splittedFile[blockCounter * 5 + 1];\n      const Note = splittedFile[blockCounter * 5 + 3];\n      blockCounter += 1;\n\n      if (clippingType.includes('Highlight')) {\n        // add block to dict\n        if (Notes.has(title)) {\n          const oldNote = Notes.get(title);\n          const newNote = `${oldNote}\\n\\n${Note}`;\n          Notes.set(title, newNote);\n        } else {\n          Notes.set(title, Note);\n        }\n      }\n    }\n    return Notes;\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    const file: File = (target.files as FileList)[0];\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = () => {\n      // setFileContent(reader.result as string);\n      setFileParsedContent(parseFile(reader.result as string));\n    };\n\n    reader.onerror = () => {\n      // console.log(reader.error);\n    };\n\n    setFileName(file.name);\n  };\n\n  const printNoteMap = (key: string, value: string) => {\n    return (\n      <div className=\"mt-4\">\n        <h3 className=\"text-center text-xl\">{key}</h3>\n        <div className=\"whitespace-pre-line\">{value}</div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Head>\n        <title>Kindle Clippings Parser</title>\n        {/* <link rel=\"icon\" href=\"/favicon.ico\" /> */}\n      </Head>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-3xl mx-auto\">\n          <h1 className=\"mt-8 text-2xl text-center\">\n            Welcome friends of LibGen!\n          </h1>\n          <div className=\"mt-8\">\n            <input type=\"file\" accept=\".txt\" onChange={handleFileUpload} />\n            Uploaded File: {fileName}\n            <div className=\"mt-4\">\n              <h2>File: </h2>\n              {/* {fileContent} */}\n            </div>\n            <div className=\"mt-4\">\n              <h2>Parsed File:</h2>\n              {fileParsedContent\n                ? [...fileParsedContent.keys()].map((noteTitle) => {\n                    return printNoteMap(\n                      noteTitle,\n                      fileParsedContent.get(noteTitle)\n                    );\n                  })\n                : null}\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <footer />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}