{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport axios from \"axios\";\n\nconst login = async data => {\n  console.log(\"in login\");\n  const config = {\n    headers: {\n      'Content-Type': \"application/json; charset=utf-8\",\n      'corsOrigin': '*',\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n  };\n  const url = \"http://localhost/auth/token\";\n  const result = await axios.post(url, data, config);\n  console.log('result', result);\n  return result;\n};\n\nexport default ((req, res) => NextAuth(req, res, {\n  providers: [Providers.Credentials({\n    name: 'Credentials',\n    credentials: {\n      username: {\n        label: \"Username\",\n        type: \"text\",\n        placeholder: \"jsmith\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\"\n      }\n    },\n    authorize: async credentials => {\n      console.log(\"credentials_:\", credentials);\n\n      try {\n        const data = {\n          username: credentials.username,\n          password: credentials.password\n        }; // API call associated with authentification\n        // look up the user from the credentials supplied\n\n        const user = await login(data);\n\n        if (user) {\n          // Any object returned will be saved in `user` property of the JWT\n          return Promise.resolve(user);\n        }\n      } catch (error) {\n        if (error.response) {\n          console.log(error.response);\n          return Promise.reject(new Error('Invalid Username  and Password combination'));\n        }\n      }\n\n      return Promise.resolve(null);\n    }\n  })],\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    jwt: true,\n    // Seconds - How long until an idle session expires and is no longer valid.\n    maxAge: 1 * 3 * 60 * 60,\n    // 3 hrs\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens\n    updateAge: 24 * 60 * 60 // 24 hours\n\n  },\n  callbacks: {\n    signIn: async (user, account, profile) => {\n      console.log(\"in callback\");\n      return Promise.resolve(true);\n    },\n    redirect: async (url, baseUrl) => {\n      return Promise.resolve(baseUrl);\n    },\n    session: async (session, user) => {\n      return Promise.resolve(session);\n    },\n    jwt: async (token, user, account, profile, isNewUser) => {\n      return Promise.resolve(token);\n    }\n  },\n  // pages: {\n  //     signIn: '/auth/credentials-signin',\n  //     signOut: '/auth/credentials-signin?logout=true',\n  //     error: '/auth/credentials-signin', // Error code passed in query string as ?error=\n  //     newUser:'/'\n  //   },\n  debug: true,\n  secret: process.env.NEXT_PUBLIC_AUTH_SECRET,\n  jwt: {\n    secret: process.env.NEXT_PUBLIC_JWT_SECRET\n  }\n}));","map":{"version":3,"sources":["/Users/jan/Documents/Programming/leetcodebuddy/frontend/app/pages/api/auth/[...nextauth].ts"],"names":["NextAuth","Providers","axios","login","data","console","log","config","headers","url","result","post","req","res","providers","Credentials","name","credentials","username","label","type","placeholder","password","authorize","user","Promise","resolve","error","response","reject","Error","session","jwt","maxAge","updateAge","callbacks","signIn","account","profile","redirect","baseUrl","token","isNewUser","debug","secret","process","env","NEXT_PUBLIC_AUTH_SECRET","NEXT_PUBLIC_JWT_SECRET"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport axios from \"axios\";\n\nconst login = async (data: any) => {\n  console.log(\"in login\")\n    const config = {\n        headers: {\n            'Content-Type': \"application/json; charset=utf-8\",\n            'corsOrigin': '*',\n            \"Access-Control-Allow-Origin\": \"*\"\n        }\n    };\n    const url = \"http://localhost/auth/token\"\n    const result = await axios.post(url, data, config);\n    console.log('result', result);\n    return result;\n};\n\nexport default (req: any, res: any) =>\n    NextAuth(req, res, {\n        providers: [\n            Providers.Credentials({\n                name: 'Credentials',\n                credentials: {\n                  username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n                  password: {  label: \"Password\", type: \"password\" }\n                },\n                authorize: async (credentials) => {\n                    console.log(\"credentials_:\", credentials);\n                    try {\n                        const data = {\n                            username: credentials.username,\n                            password: credentials.password\n\n                        }\n                        // API call associated with authentification\n                         // look up the user from the credentials supplied\n                        const user = await login(data);\n                        if (user) {\n                            // Any object returned will be saved in `user` property of the JWT\n                            return Promise.resolve(user);\n                          }\n                    } catch (error) {\n                        if (error.response) {\n\n                            console.log(error.response);\n                            return Promise.reject(new Error('Invalid Username  and Password combination'));\n                        }\n                      }\n                      return Promise.resolve(null)\n                },\n            }),\n        ],\n        session: {\n            // Use JSON Web Tokens for session instead of database sessions.\n            // This option can be used with or without a database for users/accounts.\n            // Note: `jwt` is automatically set to `true` if no database is specified.\n            jwt: true,\n            // Seconds - How long until an idle session expires and is no longer valid.\n            maxAge: 1 * 3 * 60 * 60, // 3 hrs\n            // Seconds - Throttle how frequently to write to database to extend a session.\n            // Use it to limit write operations. Set to 0 to always update the database.\n            // Note: This option is ignored if using JSON Web Tokens\n            updateAge: 24 * 60 * 60, // 24 hours\n          },\n          callbacks: {\n            signIn: async (user, account, profile) => { console.log(\"in callback\"); return Promise.resolve(true) },\n            redirect: async (url, baseUrl) => { return Promise.resolve(baseUrl) },\n            session: async (session, user) => { return Promise.resolve(session) },\n            jwt: async (token, user, account, profile, isNewUser) => { return Promise.resolve(token) }\n          },\n        // pages: {\n        //     signIn: '/auth/credentials-signin',\n        //     signOut: '/auth/credentials-signin?logout=true',\n        //     error: '/auth/credentials-signin', // Error code passed in query string as ?error=\n        //     newUser:'/'\n        //   },\n\n        debug: process.env.NODE_ENV === \"development\",\n        secret: process.env.NEXT_PUBLIC_AUTH_SECRET,\n        jwt: {\n            secret: process.env.NEXT_PUBLIC_JWT_SECRET,\n        }\n    });\n\n\n"]},"metadata":{},"sourceType":"module"}