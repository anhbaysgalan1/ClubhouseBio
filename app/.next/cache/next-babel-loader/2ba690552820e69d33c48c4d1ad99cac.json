{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jan/Documents/Programming/leetcodebuddy/frontend/app/components/auth/AuthProvider.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport AuthContext from './AuthContext'; // import Router, { useRouter } from 'next/router'\n// api here is an axios instance which has the baseURL set according to the env.\n\nimport api from '../../services/api';\nexport default (({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    async function loadUserFromCookies() {\n      const token = Cookies.get('token');\n\n      if (token) {\n        console.log(\"Got a token in the cookies, let's see if it is valid\");\n        api.defaults.headers.Authorization = `Bearer ${token}`;\n        const {\n          data: user\n        } = await api.get('users/me');\n        if (user) setUser(user);\n      }\n\n      setLoading(false);\n    }\n\n    loadUserFromCookies();\n  }, []);\n\n  const login = async (email, password) => {\n    const {\n      data: token\n    } = await api.post('auth/token', {\n      email,\n      password\n    });\n\n    if (token) {\n      console.log(\"Got token\");\n      Cookies.set('token', token, {\n        expires: 60\n      });\n      api.defaults.headers.Authorization = `Bearer ${token.token}`;\n      const {\n        data: user\n      } = await api.get('users/me');\n      setUser(user);\n      console.log(\"Got user\", user);\n    }\n  };\n\n  const logout = (email, password) => {\n    Cookies.remove('token');\n    setUser(null);\n    delete api.defaults.headers.Authorization;\n    window.location.pathname = '/login';\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated: !!user,\n      isLoading: loading,\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n});","map":{"version":3,"sources":["/Users/jan/Documents/Programming/leetcodebuddy/frontend/app/components/auth/AuthProvider.tsx"],"names":["React","useState","useEffect","Cookies","AuthContext","api","children","user","setUser","loading","setLoading","loadUserFromCookies","token","get","console","log","defaults","headers","Authorization","data","login","email","password","post","set","expires","logout","remove","window","location","pathname","isAuthenticated","isLoading"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;AAEA;;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,gBAAe,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAE5B,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeS,mBAAf,GAAqC;AACjC,YAAMC,KAAK,GAAGT,OAAO,CAACU,GAAR,CAAY,OAAZ,CAAd;;AACA,UAAID,KAAJ,EAAW;AACPE,QAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ;AACAV,QAAAA,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASN,KAAM,EAArD;AACA,cAAM;AAAEO,UAAAA,IAAI,EAAEZ;AAAR,YAAiB,MAAMF,GAAG,CAACQ,GAAJ,CAAQ,UAAR,CAA7B;AACA,YAAIN,IAAJ,EAAUC,OAAO,CAACD,IAAD,CAAP;AACb;;AACDG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AACDC,IAAAA,mBAAmB;AACtB,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAMS,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACrC,UAAM;AAAEH,MAAAA,IAAI,EAAEP;AAAR,QAAkB,MAAMP,GAAG,CAACkB,IAAJ,CAAS,YAAT,EAAuB;AAAEF,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAvB,CAA9B;;AACA,QAAIV,KAAJ,EAAW;AACPE,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAZ,MAAAA,OAAO,CAACqB,GAAR,CAAY,OAAZ,EAAqBZ,KAArB,EAA4B;AAAEa,QAAAA,OAAO,EAAE;AAAX,OAA5B;AACApB,MAAAA,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASN,KAAK,CAACA,KAAM,EAA3D;AACA,YAAM;AAAEO,QAAAA,IAAI,EAAEZ;AAAR,UAAiB,MAAMF,GAAG,CAACQ,GAAJ,CAAQ,UAAR,CAA7B;AACAL,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,IAAxB;AACH;AACJ,GAVD;;AAYA,QAAMmB,MAAM,GAAG,CAACL,KAAD,EAAQC,QAAR,KAAqB;AAChCnB,IAAAA,OAAO,CAACwB,MAAR,CAAe,OAAf;AACAnB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA,WAAOH,GAAG,CAACW,QAAJ,CAAaC,OAAb,CAAqBC,aAA5B;AACAU,IAAAA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA2B,QAA3B;AACH,GALD;;AAQA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAE,CAAC,CAACxB,IAArB;AAA2ByB,MAAAA,SAAS,EAAEvB,OAAtC;AAA+CF,MAAAA,IAA/C;AAAqDa,MAAAA,KAArD;AAA4DM,MAAAA;AAA5D,KAA7B;AAAA,cACKpB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA5CD","sourcesContent":["\nimport React, { useState, useEffect } from 'react'\nimport Cookies from 'js-cookie'\nimport AuthContext from './AuthContext'\n// import Router, { useRouter } from 'next/router'\n\n// api here is an axios instance which has the baseURL set according to the env.\nimport api from '../../services/api';\n\nexport default ({children }) => {\n\n    const [user, setUser] = useState(null)\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        async function loadUserFromCookies() {\n            const token = Cookies.get('token')\n            if (token) {\n                console.log(\"Got a token in the cookies, let's see if it is valid\")\n                api.defaults.headers.Authorization = `Bearer ${token}`\n                const { data: user } = await api.get('users/me')\n                if (user) setUser(user);\n            }\n            setLoading(false)\n        }\n        loadUserFromCookies()\n    }, [])\n\n    const login = async (email, password) => {\n        const { data: token } = await api.post('auth/token', { email, password })\n        if (token) {\n            console.log(\"Got token\")\n            Cookies.set('token', token, { expires: 60 })\n            api.defaults.headers.Authorization = `Bearer ${token.token}`\n            const { data: user } = await api.get('users/me')\n            setUser(user)\n            console.log(\"Got user\", user)\n        }\n    }\n\n    const logout = (email, password) => {\n        Cookies.remove('token')\n        setUser(null)\n        delete api.defaults.headers.Authorization\n        window.location.pathname = '/login'\n    }\n\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated: !!user, isLoading: loading, user, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}